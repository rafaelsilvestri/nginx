# add rate limit by uri
limit_req_zone $request_uri zone=limit_by_uri:10m rate=1r/s;
# add rate limit by client's ip
limit_req_zone $binary_remote_addr zone=limit_by_client:10m rate=1r/s;

server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;
    
    root    /var/www;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        #root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    location /foo/ {
        try_files $uri /index.html;
        limit_req zone=limit_by_client;            
    }

    # /foo/BF3D892A38DA449BA5C7D45B78940074/bar
    location ~* ^/foo/[0-9A-F]+/bar$ {
        try_files $uri /index1.html;
        # keep any /foo/ limited BUT this one
        #limit_req zone=limit_by_client;       
    }

    location /unlimited {
        try_files $uri /unlimited/index.html;
    }

    location /limit {
        try_files $uri /rate_limit/index.html;
        limit_req zone=limit_by_client;            
    }

    location /burst {
        try_files $uri /rate_limit_burst/index.html;
        limit_req zone=limit_by_client burst=10;
    }

    location /burst-nodelay {
        try_files $uri /rate_limit_burst_nodelay/index.html;        
        # With the nodelay parameter, NGINX still allocates slots in the queue according to the burst parameter
        # and imposes the configured rate limit, but not by spacing out the forwarding of queued requests. Instead, 
        # when a request arrives “too soon”, NGINX forwards it immediately as long as there is a slot available for it in the queue.
        limit_req zone=limit_by_client burst=10 nodelay;
    }

    location /burst-delay {
        try_files $uri /rate_limit_burst_delay/index.html;           
        # Two Stages Rate Limiting
        # Configure NGINX to allow a burst of requests to accommodate the typical web browser request pattern, 
        # and then throttle additional excessive requests up to a point, beyond which additional excessive requests are rejected.           
        limit_req zone=limit_by_client burst=10 delay=5;
    }


    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /var/www;
    }

    error_page  503  /503.html;
    location = /503.html {
        root   /var/www;
    }
    
    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}